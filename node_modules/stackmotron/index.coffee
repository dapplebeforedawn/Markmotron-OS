#Stackmotron
# - <  Work the second to last element added to the stack. (can be repeated e.g. << to go deeper in the stack)
# - <? Replay the message for the top-of-stack job
# - >< This incoming message bypasses the stack

#Feel free to register for `pushed:some-event-name` and `poped:some-event-name` events

uuid    = require 'uuid'
events  = require 'events'

class Stackmotron
  @stack        = []
  @STATUS_SYM   = '<?'
  @CONTENTS_SYM = '<*'
  @NOOP_SYM     = '><'
  @emitter      = new events.EventEmitter
  @emitter.setMaxListeners 0

  @push: (message, action, data)->
    itemId = uuid.v4()
    @stack.push {message: message, action: action, data: data, id:itemId}
    @emitter.emit "pushed:#{action}", {id: itemId}
    itemId
    
  @pop: (responseData, controlText)->
    return null if @isEmpty()
    stored = @stack.pop()
    console.log "Stackmotron pop'd: ", stored
    Markmotron.emit stored["action"], {stackData: stored["data"], responseData: responseData}
    @emitter.emit "poped:#{stored["action"]}", {id: stored["id"]}

  @remove: (idToRemove)->
    idxToRemove = null
    for item, idx in @stack
      idxToRemove = idx if item.id == idToRemove
    if idxToRemove != null
      console.log "Stackmotron removed: ", @stack[idxToRemove]
      @stack.splice(idxToRemove, 1)


  @getStatus: (message)->
    return unless @extractSymbol(message) == STATUS_SYM
    # some something, not sure what yet

  @getContents: (message)->
    return unless @extractSymbol(message) == CONTENTS_SYM
    # some something, not sure what yet

  @extractSymbol: (text)->
    match = text.match(/(?:<\?|<\*|<+|><)$/)
    return null unless match
    match[0]

  @handle: (text)->
    !@handleControlSymbol(text) &&
    @pop(text)

  @handleControlSymbol: (text)->
    @getStatus(text)   ||
    @getContents(text)

  @isEmpty: ->
    @stack.length == 0
    
  @topOfStack: ->
    return null if @isEmpty()
    @stack[@stack.length-1]
    
  #proxy on and emit to the underlying emitter
  @on: (event, listener)->
    @emitter.on event, listener
  @once: (event, listener)->
    @emitter.once event, listener

module.exports = Stackmotron
