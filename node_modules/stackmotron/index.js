// Generated by CoffeeScript 1.6.3
var Stackmotron, events, uuid;

uuid = require('uuid');

events = require('events');

Stackmotron = (function() {
  function Stackmotron() {}

  Stackmotron.stack = [];

  Stackmotron.STATUS_SYM = '<?';

  Stackmotron.CONTENTS_SYM = '<*';

  Stackmotron.NOOP_SYM = '><';

  Stackmotron.emitter = new events.EventEmitter;

  Stackmotron.emitter.setMaxListeners(0);

  Stackmotron.push = function(message, action, data) {
    var itemId;
    itemId = uuid.v4();
    this.stack.push({
      message: message,
      action: action,
      data: data,
      id: itemId
    });
    this.emitter.emit("pushed:" + action, {
      id: itemId
    });
    return itemId;
  };

  Stackmotron.pop = function(responseData, controlText) {
    var stored;
    if (this.isEmpty()) {
      return null;
    }
    stored = this.stack.pop();
    console.log("Stackmotron pop'd: ", stored);
    Markmotron.emit(stored["action"], {
      stackData: stored["data"],
      responseData: responseData
    });
    return this.emitter.emit("poped:" + stored["action"], {
      id: stored["id"]
    });
  };

  Stackmotron.remove = function(idToRemove) {
    var idx, idxToRemove, item, _i, _len, _ref;
    idxToRemove = null;
    _ref = this.stack;
    for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
      item = _ref[idx];
      if (item.id === idToRemove) {
        idxToRemove = idx;
      }
    }
    if (idxToRemove !== null) {
      console.log("Stackmotron removed: ", this.stack[idxToRemove]);
      return this.stack.splice(idxToRemove, 1);
    }
  };

  Stackmotron.getStatus = function(message) {
    if (this.extractSymbol(message) !== STATUS_SYM) {

    }
  };

  Stackmotron.getContents = function(message) {
    if (this.extractSymbol(message) !== CONTENTS_SYM) {

    }
  };

  Stackmotron.extractSymbol = function(text) {
    var match;
    match = text.match(/(?:<\?|<\*|<+|><)$/);
    if (!match) {
      return null;
    }
    return match[0];
  };

  Stackmotron.handle = function(text) {
    return !this.handleControlSymbol(text) && this.pop(text);
  };

  Stackmotron.handleControlSymbol = function(text) {
    return this.getStatus(text) || this.getContents(text);
  };

  Stackmotron.isEmpty = function() {
    return this.stack.length === 0;
  };

  Stackmotron.topOfStack = function() {
    if (this.isEmpty()) {
      return null;
    }
    return this.stack[this.stack.length - 1];
  };

  Stackmotron.on = function(event, listener) {
    return this.emitter.on(event, listener);
  };

  Stackmotron.once = function(event, listener) {
    return this.emitter.once(event, listener);
  };

  return Stackmotron;

})();

module.exports = Stackmotron;
