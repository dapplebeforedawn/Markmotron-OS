// Generated by CoffeeScript 1.3.3
(function() {
  var flatten, gatewayHost, https, qs;

  https = require("https");

  qs = require('qs');

  flatten = function(numberWithFormat) {
    return numberWithFormat.toString().replace(/[^0-9]/g, '');
  };

  gatewayHost = function() {
    return "api.twilio.com";
  };

  module.exports = function(sid, auth, from, options) {
    var _base;
    if (options == null) {
      options = {};
    }
    options.fakeSend || (options.fakeSend = (_base = process.env).FAKESEND || (_base.FAKESEND = 0));
    return {
      send: function(to, message, cb) {
        var gatewayEndpoint, httpAuth, httpOptions, postBody, sendMessage;
        gatewayEndpoint = "/2010-04-01/Accounts/" + sid + "/SMS/Messages.json";
        postBody = qs.stringify({
          To: to,
          From: from,
          Body: message
        });
        httpAuth = "Basic " + new Buffer(sid + ":" + auth).toString("base64");
        httpOptions = {
          host: gatewayHost(),
          port: 443,
          path: gatewayEndpoint,
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': postBody.length,
            'Authorization': httpAuth
          }
        };
        sendMessage = function(callback) {
          var gatewayReq, jsonResponse;
          jsonResponse = "";
          gatewayReq = https.request(httpOptions, function(res) {
            res.setEncoding('utf8');
            res.on('data', function(chunk) {
              return jsonResponse += chunk;
            });
            return res.on('end', function() {
              return callback(null, jsonResponse);
            });
          });
          gatewayReq.on('error', function(e) {
            console.log("Error sending gateway request: ", e.message);
            return callback('Gateway Error ', e);
          });
          gatewayReq.write(postBody);
          return gatewayReq.end();
        };
        if (options.fakeSend > 0) {
          return cb(null, "Fake Gateway Request Sent");
        }
        if (options.fakeSend < 0) {
          return cb('Fake Gateway Error', "Fake Gateway Error");
        }
        return sendMessage(cb);
      }
    };
  };

}).call(this);
