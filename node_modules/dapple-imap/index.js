// Generated by CoffeeScript 1.6.3
var EventEmitter, Imap, ImapEmitter, imap, mimelib, moveToArchive, normalizeAddressHeaders, openInbox, searchForMail, util;

EventEmitter = require("events").EventEmitter;

Imap = require("imap");

mimelib = require("mimelib-noiconv");

util = require("util");

imap = new Imap({
  user: process.env.EMAIL_USERNAME,
  password: process.env.EMAIL_PASSWORD,
  host: 'imap.gmail.com',
  port: 993,
  tls: true,
  tlsOptions: {
    rejectUnauthorized: false
  }
});

ImapEmitter = module.exports = new EventEmitter();

openInbox = function(cb) {
  return imap.openBox('INBOX', true, cb);
};

normalizeAddressHeaders = function(headers) {
  var headerName, needsNormalized, normalized, _i, _len, _results;
  needsNormalized = ["from", "to"];
  _results = [];
  for (_i = 0, _len = needsNormalized.length; _i < _len; _i++) {
    headerName = needsNormalized[_i];
    normalized = headers[headerName].map(function(address) {
      return mimelib.parseAddresses(address);
    });
    headers[headerName] = normalized;
    _results.push(headers[headerName] = headers[headerName][0]);
  }
  return _results;
};

moveToArchive = function(msgUID) {
  return imap.move(msgUID, '[Gmail]/All Mail', function(err) {
    if (err) {
      return console.log(err);
    }
  });
};

searchForMail = function(server) {
  return server.search(['UNSEEN'], function(err, results) {
    var f;
    f = server.fetch(results, {
      bodies: ['HEADER', 'TEXT']
    });
    f.on('message', function(msg, seqno) {
      var messageForEvent;
      messageForEvent = {
        attrs: {},
        headers: {},
        body: ''
      };
      msg.on('body', function(stream, info) {
        var buffer;
        buffer = '';
        stream.on('data', function(chunk) {
          return buffer += chunk.toString('utf8');
        });
        return stream.once('end', function() {
          messageForEvent["headers"] = Imap.parseHeader(buffer);
          return messageForEvent["body"] += buffer;
        });
      });
      msg.once('attributes', function(attrs) {
        return messageForEvent['attrs'] = attrs;
      });
      return msg.once('end', function() {
        normalizeAddressHeaders(messageForEvent.headers);
        ImapEmitter.emit('mail', messageForEvent);
        return moveToArchive(messageForEvent.attrs.uid);
      });
    });
    f.once('error', function(err) {
      return console.log('IMAP Fetch error: ' + err);
    });
    return f.once('end', function() {
      return console.log('IMAP Done fetching all messages!');
    });
  });
};

imap.once('ready', function() {
  console.log("IMAP Ready");
  return openInbox(function(err, box) {
    console.log("IMAP Listening in mailbox: ", box);
    if (err) {
      throw err;
    }
  });
});

imap.once('error', function(err) {
  return console.log("Error Connecting IMAP: ", err);
});

imap.on('mail', function(items, err) {
  return searchForMail(imap);
});

imap.connect();
